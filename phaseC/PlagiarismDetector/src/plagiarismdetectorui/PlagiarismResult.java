
package plagiarismdetectorui;

import applicationStructure.JavaPlagiarismDetector;
import applicationStructure.PlagiarismDetector;
import applicationStructure.Report;
import java.awt.BorderLayout;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FileUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author team-22
 * This class creates a page which show your final result of the application
 */
public class PlagiarismResult extends javax.swing.JFrame {

    /**
     * Creates new form PlagiarismResult
     */
    //Get results of plagarism algorithm to be displayed in UI
    //Name of Input File 1
     String fileName1;
     //Name of Input File 2
     String fileName2;
     //HashMap to store file names and their path on file system
     HashMap<String,String> fileMap;
     //For calling functions of Validation class
     Validations validation;
    // Report generated after comparing the files
     Report r;
     //Similarity % after comparing
    double similarityScore;
    //PieChart to display
    JFreeChart chart;
    
    //Constructor to initialize certain fields
    public PlagiarismResult(String fileName1, String fileName2, HashMap<String,String> fileMap, boolean flag) {
        initComponents();
        validation = new Validations();
        this.fileName1=fileName1;
        this.fileName2=fileName2;
        this.fileMap = fileMap;
        setSavedFileds();
        saveButton2.setEnabled(flag);
        //Show Similarity score on Ui
        setSimilarityScore();
        //method to generate grapgh depending on the similarity score
        generateGraphs(similarityScore);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
     //initComponents method is generated by NetBeans when you create a Swing application page/form.
    //Making any changes to this method will make your form uneditable by the GUI
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        pathChooser = new javax.swing.JFileChooser();
        appName = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        helpText = new javax.swing.JLabel();
        save1 = new javax.swing.JTextField();
        save2 = new javax.swing.JTextField();
        saveButton1 = new javax.swing.JButton();
        saveButton2 = new javax.swing.JButton();
        saveReport = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        res = new javax.swing.JLabel();
        graph = new javax.swing.JPanel();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        appName.setBackground(new java.awt.Color(50, 111, 197));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Plagiarism Detector");

        javax.swing.GroupLayout appNameLayout = new javax.swing.GroupLayout(appName);
        appName.setLayout(appNameLayout);
        appNameLayout.setHorizontalGroup(
            appNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appNameLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(597, Short.MAX_VALUE))
        );
        appNameLayout.setVerticalGroup(
            appNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appNameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addContainerGap())
        );

        helpText.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        helpText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        helpText.setText("Similarity score after comparison");

        save1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save1ActionPerformed(evt);
            }
        });

        saveButton1.setText("Save for later");
        saveButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButton1ActionPerformed(evt);
            }
        });

        saveButton2.setText("Save for later");
        saveButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButton2ActionPerformed(evt);
            }
        });

        saveReport.setText("Save Report");
        saveReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveReportActionPerformed(evt);
            }
        });

        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        res.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        res.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout graphLayout = new javax.swing.GroupLayout(graph);
        graph.setLayout(graphLayout);
        graphLayout.setHorizontalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphLayout.setVerticalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(appName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(graph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(helpText, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(save1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                                        .addComponent(save2))
                                    .addComponent(res, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(saveButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(homeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpText, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveReport, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(res, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(graph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void save1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save1ActionPerformed
        
    }//GEN-LAST:event_save1ActionPerformed
    //Button to save Report to a selected Destination
    private void saveReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveReportActionPerformed
        int returnVal = pathChooser.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = pathChooser.getSelectedFile();
        try {
             //Save Report to Selected Destination   
              writeReport(file); 
        } catch (Exception ex) {
           Logger.getLogger(PlagiarismResult.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    }//GEN-LAST:event_saveReportActionPerformed
    //Home Button to go Back to Index Page
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        new Index().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_homeButtonActionPerformed
// Save Button for Input file 1
    private void saveButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButton1ActionPerformed
        //If file with same name exists, ask user to rename
        if(fileMap.get(save1.getText())!=null){
            save1.setEditable(true);
            JOptionPane.showMessageDialog(null, UIConstants.SAME_FILENAME_EXISTS);
            return;
        }
        File source = new File(fileName1);
        String basePath = new File("").getAbsolutePath()+File.separator+"Saved_Files"+File.separator+save1.getText();
        File dest = new File(basePath);
        //Save it depending on whether it is a file or a directory
        if(source.isDirectory()){
            try {
                FileUtils.copyDirectory(source, dest);
                saveButton1.setEnabled(false);
                save1.setEditable(false);
                saveButton1.setText("Saved");
                fileMap = validation.getSavedFiles();
            } catch (IOException ex) {
                Logger.getLogger(PlagiarismResult.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                //If it is a file and name is not a vaild .java file
                 if(!validation.checkFileExistance(basePath)){
                    JOptionPane.showMessageDialog(null, UIConstants.INVALID_RENAME_MESSAGE);
                    return;
                }
            Files.copy(source.toPath(), dest.toPath());
            saveButton1.setEnabled(false);
            save1.setEditable(false);
            saveButton1.setText("Saved");
             fileMap = validation.getSavedFiles();
        } catch (IOException ex) {
            Logger.getLogger(PlagiarismResult.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_saveButton1ActionPerformed
// Save Button for Input file 2
    private void saveButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButton2ActionPerformed
        //If file with same name exists, ask user to rename
        if(fileMap.get(save2.getText())!=null){
            save2.setEditable(true);
            JOptionPane.showMessageDialog(null, UIConstants.SAME_FILENAME_EXISTS);
            return;
        }
        File source = new File(fileName2);
        //Save it depending on whether it is a file or a directory
        String basePath = new File("").getAbsolutePath()+File.separator+File.separator+"Saved_Files"+File.separator+File.separator+save2.getText();
        File dest = new File(basePath);
        if(source.isDirectory()){
            try {
                FileUtils.copyDirectory(source, dest);
                saveButton2.setEnabled(false);
                save2.setEditable(false);
                saveButton2.setText("Saved");
                 fileMap = validation.getSavedFiles();
            } catch (IOException ex) {
                Logger.getLogger(PlagiarismResult.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
               //If it is a file and name is not a vaild .java file
                if(!validation.checkFileExistance(basePath)){
                    JOptionPane.showMessageDialog(null, UIConstants.INVALID_RENAME_MESSAGE);
                    return;
                }
            Files.copy(source.toPath(), dest.toPath());
            saveButton2.setEnabled(false);
            save2.setEditable(false);
            saveButton2.setText("Saved");
             fileMap = validation.getSavedFiles();
            } catch (IOException ex) {
                Logger.getLogger(PlagiarismResult.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_saveButton2ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel appName;
    private javax.swing.JPanel graph;
    private javax.swing.JLabel helpText;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JFileChooser pathChooser;
    private javax.swing.JLabel res;
    private javax.swing.JTextField save1;
    private javax.swing.JTextField save2;
    private javax.swing.JButton saveButton1;
    private javax.swing.JButton saveButton2;
    private javax.swing.JButton saveReport;
    // End of variables declaration//GEN-END:variables

    //Set certains fields of the page as uneditable to the user
    private void setSavedFileds() {
        save1.setEditable(false);
        save2.setEditable(false);
        
        save1.setText(fileName1.substring(fileName1.lastIndexOf(File.separator)+1));
        save2.setText(fileName2.substring(fileName2.lastIndexOf(File.separator)+1));
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.txt", "text");
        pathChooser.setFileFilter(filter);        
        pathChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        
    }
    //Write a report of the 2 files checked for plagiarism to a given file
    private void writeReport(File file){
        try {
            //Check if file with same name already exists. If Yes, show error message
            String basePath = file.getAbsolutePath()+".txt";
            if(new File(basePath).exists()){
                JOptionPane.showMessageDialog(null, UIConstants.SAME_FILENAME_EXISTS);
                return;
            }
            //Write Report to given file
            File outputFile = new File(basePath);
            FileWriter writer = new FileWriter(outputFile);         
            writer.write("Plagiarism Report\n");
            writer.write("Input File 1 : "+fileName1+"\n");
            writer.write("Input File 2 : "+fileName2+"\n");
            writer.write("Code Plagiarism Percentage : "+r.getSimilarityScore()+"%\n");
            writer.write("Comments in Code Plagiarism Percentage : "+r.getCommentSimilarity()+"%\n");
            writer.write("Conclusion : "+r.getFinalResultText());
            writer.flush();
            writer.close();
            
              saveReport.setText("Report Saved");
              saveReport.setEnabled(false);
              JOptionPane.showMessageDialog(null, "Your Report has been saved to : "+basePath);
              
        } catch (IOException ex) {
            Logger.getLogger(PlagiarismResult.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //Generate a graph to show similarity percentage
    private void generateGraphs(double percent){
        graph.setLayout(new java.awt.BorderLayout());
        
        //PieChart to show similarity percentage
        DefaultPieDataset dataset = new DefaultPieDataset( );
      dataset.setValue( "Similar Code" , new Double( percent ) );  
      dataset.setValue( "Non-Similar Code" , new Double( 100-percent ) ); 
      
         chart = ChartFactory.createPieChart(      
         "Plagiarism Results",   // chart title 
         dataset,          // data    
         true,             // include legend   
         true, 
         false);
      
      ChartPanel CP = new ChartPanel(chart);
        graph.add(CP,BorderLayout.CENTER);
        graph.validate();
    }
    
    
    
    //Display Plagiarism Result on GUI
    private void setSimilarityScore(){
        PlagiarismDetector pd = new JavaPlagiarismDetector();
        //Report generated after checking  files
        r = pd.getPlagiarismReport(fileName1, fileName2);
        similarityScore = r.getSimilarityScore();
        //If similarty < 50% file is not plagiarised else it is 
        if(similarityScore<UIConstants.PLAGIARISM_THRESHOLD){
            helpText.setText(UIConstants.TEXT_FILES_NOT_PLAGIARISED);
        }
        else{
            helpText.setText(UIConstants.TEXT_FILES_PLAGIARISED);
        }
        //Set string to be displayed according to the score
        String ans = similarityScore+"%";
        if(ans.length()>=UIConstants.MIN_RESULT_LENGTH+1)
        	ans=ans.substring(0,UIConstants.MIN_RESULT_LENGTH)+"%";
        res.setText("Similarity Percentage: "+ans);
    }
}
